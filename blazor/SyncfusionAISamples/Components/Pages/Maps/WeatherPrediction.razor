@page "/maps/weather-prediction"

@inject AIService AIChatService
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Data
@using System.Collections.ObjectModel
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
<title>Syncfusion - Smart Weather Prediction</title>

<h4 style="text-align:center;">Smart Weather Prediction</h4>
<style>
    .spacing {
        margin: 5px;
    }
</style>

<Description>
    <p>Syncfusion Blazor Maps integrated with AI to automatically forecast weather conditions in the United States for the next five days. Know more <a target="_blank" href="https://github.com/syncfusion/smart-ai-samples/blob/master/blazor/SyncfusionAISamples/Components/Pages/Maps/Readme.md">here</a>.</p>
</Description>

<SfMaps Height="630px">
    <SfSpinner @bind-Visible="@SpinnerVisibility"></SfSpinner>
    <MapsEvents Loaded="() => GetWeatherForDay(0)"></MapsEvents>
    <MapsCenterPosition Latitude="35.07653392014242" Longitude="-95.40586193773237"></MapsCenterPosition>
    <MapsMargin Top="0" Bottom="0" Left="0" Right="0"></MapsMargin>
    <MapsZoomSettings Enable=false MaxZoom="19" ZoomFactor="5">
        <MapsZoomToolbarSettings>
            <MapsZoomToolbarButton ToolbarItems="new List<ToolbarItem>() { ToolbarItem.Zoom, ToolbarItem.ZoomIn, ToolbarItem.ZoomOut, ToolbarItem.Pan, ToolbarItem.Reset }"></MapsZoomToolbarButton>
        </MapsZoomToolbarSettings>
    </MapsZoomSettings>
    <MapsLayers>
        <MapsLayer UrlTemplate="https://a.tile.openstreetmap.org/level/tileX/tileY.png" TValue="string">
            <MapsMarkerSettings>
                @if (MarkerCollection.Count > 0)
                {
                    <MapsMarker TValue="Markers" Visible="true" DataSource="MarkerCollection" AnimationDuration="0">
                        <MarkerTemplate>
                            @{
                                var Data = context as Markers;
                                var weatherImages = new Dictionary<string, string>
                                {
                                    { "sunny day", "weather-clear" },
                                    { "snowy day", "weather-snow" },
                                    { "foggy day", "weather-foggy" },
                                    { "cloudy day", "weather-clouds" },
                                    { "rainy day", "weather-rain" }
                                };

                                string currentImage = weatherImages.ContainsKey(Data.WeatherCondition) ? weatherImages[Data.WeatherCondition] : string.Empty;

                                <div style="display:flex;transform:translate(-50%, -50%)">
                                    <div style="background-color:black; opacity:0.8; align-content:center; padding-left:5px;padding-right:5px">
                                        <img class="markerTemplate" src='@("images/"+ currentImage + ".svg")' alt="Weather" height="35px" width="35px" />
                                    </div>
                                    <div style="background-color:#fff; opacity:0.8; padding-left:5px;padding-right:5px">
                                        <span style="font-size:12px;font-weight:bold">@Data.Name</span><br />
                                        <span style="font-size:16px;font-weight:bold">@Data.Temperature °C</span>
                                    </div>
                                </div>
                            }
                        </MarkerTemplate>
                    </MapsMarker>
                }
            </MapsMarkerSettings>
            <MapsAnnotations>
                <MapsAnnotation X="80%" Y="0%" ZIndex="10">
                    <ContentTemplate>
                        <div style="display: flex">
                            <div style="background-color: #4f46e5; color:white; font-size: 16px; padding:5px 10px 5px; width: max-content;">Weather Forecast</div>
                            <div style="background-color: white; color:black; font-size: 16px; padding:5px 10px 5px">@Day</div>
                        </div>
                    </ContentTemplate>
                </MapsAnnotation>
            </MapsAnnotations>
        </MapsLayer>
    </MapsLayers>
</SfMaps>

<div style="display:flex; justify-content: center; align-items: center;">
    @for (int i = 1; i <= 5; i++)
    {
        int currentIndex = i;
        <SfButton IsPrimary="true" CssClass="e-outline spacing" OnClick="@(() => GetWeatherForDay(currentIndex))">
            @GetButtonContent(currentIndex)
        </SfButton>
    }
</div>
